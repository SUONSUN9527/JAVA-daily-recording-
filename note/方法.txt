JAVA内存分配
1、栈		：方法运行时使用的内存（如main方法运行）
2、堆 		：存储对象或数组，用new来创建的都存储在堆中
3、方法区 		：临时存储可以运行的class文件
4、本地方法栈	：JVM在使用操作系统功能的时候使用
5、寄存器		：给CPU使用



方法：
1、定义
程序中最小的执行单元（比如main方法，运行main会执行main里面的代码），可以自己定义方法

2、好处
重复的代码和具有独立功能的代码单独打包到一个独立方法中，当需要这个功能就调用该方法
①可以提高代码的复用性
②可以提高代码的可维护性

3、
代码打包的过程---方法的定义
手动调用方法-----方法的调用

4、
①定义方法要写在main方法的外面，class类的里面
②必须先定义再调用
 
无返回值方法定义格式：（void表示返回值为空，即无返回值）
public static void 方法名（）{
           方法体--即打包的代码；
      }

5、代码结构
方法调用格式：
      方法名（参数）；
有返回值的方法定义：（void改成返回值的数据类型即可）

public static 返回值数据类型（如int，double，char等） 方法名（）{
           方法体--即打包的代码；
           return xxxx；
      }

方法调用格式：
      方法名（参数）；
      return 返回值；



String b = String.format( "%.2f",a) -是把a转化为保留两位小数的字符串
Double c = Double.valueOf(b) -----是把字符串b转化为double类型

在JAVA中，Double和double是不一样的，double是Java中的数据类型（primitive type）
而Double是double原始数据类型的封装类（warpper class）是一个对象，可以包含一个double
类型的值，并且提供额外的方法来操作这个值，如（Integer、Double、Character 等）
即Double.valueOf( ) 所返回的是一个对象，而不是原始类型的double



方法的重载：
1、定义
同名的方法（方法名相同），仅参数部分有差别但功能一致，且与返回值无关则为重载。
比如参数名相同但是参数的数据类型不一致或者参数数量不一致都可以（符合其一即可）

2、解释
基本数据类型（int float double等）是存储在栈空间中，而引用数据类型（数组等），存储在堆空间
而栈空间中存储的是堆空间中存储数据的地址值。


二维数组：
1、定义
格式： 数据类型【】【】 数组名 = new 数据类型【】【】{{ 元素 } ， { 元素 }}；
如：    int【】【】 arr = new int 【】【】{
		{1,2}，
		{3,4}
	         }；
简化格式：数据类型【】【】 数组名 = {{ 元素 } ， { 元素 }}；
如：    int【】【】 arr = {
	           {1,2}，
	           {3,4}
           }；


2、获取二维数组元素
直接访问arr【num1】【num2】表示第几行、第几列。其中num1表示二维数组中的哪个数组（二维数组内有两个数组）
而num2表示num1数组内的第几个元素


3、特殊情况
①一维数组未初始化
int【】【】 arr = new int【2】【】；
则表示只在二维数组内建立了两个一维数组，而两个一维数组还没有建立和初始化。要额外去初始化两个一维数组。
int【】arr1 = {1,2}；
int【】arr2 = {3,4,5}；
arr【0】 = arr1；（把arr1的地址赋值给arr【0】）
arr【1】 = arr2；（把arr2的地址赋值给arr【1】）
这样虽然复杂，但是灵活性更高，可以自己定义其中一维数组的长度。

②替换一维数组
int【】【】 arr = new int【2】【3】；
int【】arr1 = {1,2}；
int【】arr2 = {3,4,5}；
arr【0】 = arr1；（把arr1的地址赋值给arr【0】）
arr【1】 = arr2；（把arr2的地址赋值给arr【1】）
这种情况下，相当于替换了其中的两个一维数组，把其中储存的地址换成了新的一维数组的地址。


